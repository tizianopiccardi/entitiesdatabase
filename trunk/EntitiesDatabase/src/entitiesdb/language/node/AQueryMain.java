/* This file was generated by SableCC (http://www.sablecc.org/). */

package entitiesdb.language.node;

import entitiesdb.language.analysis.*;

@SuppressWarnings("nls")
public final class AQueryMain extends PMain
{
    private TNsight _nsight_;
    private PQuery _query_;

    public AQueryMain()
    {
        // Constructor
    }

    public AQueryMain(
        @SuppressWarnings("hiding") TNsight _nsight_,
        @SuppressWarnings("hiding") PQuery _query_)
    {
        // Constructor
        setNsight(_nsight_);

        setQuery(_query_);

    }

    @Override
    public Object clone()
    {
        return new AQueryMain(
            cloneNode(this._nsight_),
            cloneNode(this._query_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAQueryMain(this);
    }

    public TNsight getNsight()
    {
        return this._nsight_;
    }

    public void setNsight(TNsight node)
    {
        if(this._nsight_ != null)
        {
            this._nsight_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nsight_ = node;
    }

    public PQuery getQuery()
    {
        return this._query_;
    }

    public void setQuery(PQuery node)
    {
        if(this._query_ != null)
        {
            this._query_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._query_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nsight_)
            + toString(this._query_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nsight_ == child)
        {
            this._nsight_ = null;
            return;
        }

        if(this._query_ == child)
        {
            this._query_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nsight_ == oldChild)
        {
            setNsight((TNsight) newChild);
            return;
        }

        if(this._query_ == oldChild)
        {
            setQuery((PQuery) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
