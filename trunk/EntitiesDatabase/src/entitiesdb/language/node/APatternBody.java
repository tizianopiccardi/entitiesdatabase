/* This file was generated by SableCC (http://www.sablecc.org/). */

package entitiesdb.language.node;

import entitiesdb.language.analysis.*;

@SuppressWarnings("nls")
public final class APatternBody extends PBody
{
    private PPattern _pattern_;
    private PWithblock _withblock_;

    public APatternBody()
    {
        // Constructor
    }

    public APatternBody(
        @SuppressWarnings("hiding") PPattern _pattern_,
        @SuppressWarnings("hiding") PWithblock _withblock_)
    {
        // Constructor
        setPattern(_pattern_);

        setWithblock(_withblock_);

    }

    @Override
    public Object clone()
    {
        return new APatternBody(
            cloneNode(this._pattern_),
            cloneNode(this._withblock_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPatternBody(this);
    }

    public PPattern getPattern()
    {
        return this._pattern_;
    }

    public void setPattern(PPattern node)
    {
        if(this._pattern_ != null)
        {
            this._pattern_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pattern_ = node;
    }

    public PWithblock getWithblock()
    {
        return this._withblock_;
    }

    public void setWithblock(PWithblock node)
    {
        if(this._withblock_ != null)
        {
            this._withblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._withblock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pattern_)
            + toString(this._withblock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pattern_ == child)
        {
            this._pattern_ = null;
            return;
        }

        if(this._withblock_ == child)
        {
            this._withblock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pattern_ == oldChild)
        {
            setPattern((PPattern) newChild);
            return;
        }

        if(this._withblock_ == oldChild)
        {
            setWithblock((PWithblock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
