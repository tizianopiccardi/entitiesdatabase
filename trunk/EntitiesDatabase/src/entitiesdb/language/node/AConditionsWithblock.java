/* This file was generated by SableCC (http://www.sablecc.org/). */

package entitiesdb.language.node;

import entitiesdb.language.analysis.*;

@SuppressWarnings("nls")
public final class AConditionsWithblock extends PWithblock
{
    private TQmark _qmark_;
    private PConditions _conditions_;

    public AConditionsWithblock()
    {
        // Constructor
    }

    public AConditionsWithblock(
        @SuppressWarnings("hiding") TQmark _qmark_,
        @SuppressWarnings("hiding") PConditions _conditions_)
    {
        // Constructor
        setQmark(_qmark_);

        setConditions(_conditions_);

    }

    @Override
    public Object clone()
    {
        return new AConditionsWithblock(
            cloneNode(this._qmark_),
            cloneNode(this._conditions_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConditionsWithblock(this);
    }

    public TQmark getQmark()
    {
        return this._qmark_;
    }

    public void setQmark(TQmark node)
    {
        if(this._qmark_ != null)
        {
            this._qmark_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._qmark_ = node;
    }

    public PConditions getConditions()
    {
        return this._conditions_;
    }

    public void setConditions(PConditions node)
    {
        if(this._conditions_ != null)
        {
            this._conditions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditions_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._qmark_)
            + toString(this._conditions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._qmark_ == child)
        {
            this._qmark_ = null;
            return;
        }

        if(this._conditions_ == child)
        {
            this._conditions_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._qmark_ == oldChild)
        {
            setQmark((TQmark) newChild);
            return;
        }

        if(this._conditions_ == oldChild)
        {
            setConditions((PConditions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
