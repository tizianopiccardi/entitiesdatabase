/* This file was generated by SableCC (http://www.sablecc.org/). */

package entitiesdb.language.analysis;

import java.util.*;
import entitiesdb.language.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseADefinitionQuery(ADefinitionQuery node)
    {
        defaultCase(node);
    }

    public void caseARequest(ARequest node)
    {
        defaultCase(node);
    }

    public void caseASingleAttributes(ASingleAttributes node)
    {
        defaultCase(node);
    }

    public void caseAListAttributes(AListAttributes node)
    {
        defaultCase(node);
    }

    public void caseAAtomicValuetype(AAtomicValuetype node)
    {
        defaultCase(node);
    }

    public void caseAEntityValuetype(AEntityValuetype node)
    {
        defaultCase(node);
    }

    public void caseAVarValuetype(AVarValuetype node)
    {
        defaultCase(node);
    }

    public void caseAPatternBody(APatternBody node)
    {
        defaultCase(node);
    }

    public void caseASinglePattern(ASinglePattern node)
    {
        defaultCase(node);
    }

    public void caseAListPattern(AListPattern node)
    {
        defaultCase(node);
    }

    public void caseAConditionsWithblock(AConditionsWithblock node)
    {
        defaultCase(node);
    }

    public void caseAEmptyWithblock(AEmptyWithblock node)
    {
        defaultCase(node);
    }

    public void caseASingleConditions(ASingleConditions node)
    {
        defaultCase(node);
    }

    public void caseAListConditions(AListConditions node)
    {
        defaultCase(node);
    }

    public void caseTNewLine(TNewLine node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTComa(TComa node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTDefined(TDefined node)
    {
        defaultCase(node);
    }

    public void caseTLbracket(TLbracket node)
    {
        defaultCase(node);
    }

    public void caseTRbracket(TRbracket node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTVariable(TVariable node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTWith(TWith node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
