/* This file was generated by SableCC (http://www.sablecc.org/). */

package entitiesdb.language.analysis;

import java.util.*;
import entitiesdb.language.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPMain().apply(this);
        outStart(node);
    }

    public void inAQueryMain(AQueryMain node)
    {
        defaultIn(node);
    }

    public void outAQueryMain(AQueryMain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQueryMain(AQueryMain node)
    {
        inAQueryMain(node);
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        outAQueryMain(node);
    }

    public void inAInsertMain(AInsertMain node)
    {
        defaultIn(node);
    }

    public void outAInsertMain(AInsertMain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInsertMain(AInsertMain node)
    {
        inAInsertMain(node);
        if(node.getInsert() != null)
        {
            node.getInsert().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAInsertMain(node);
    }

    public void inASimpleQuery(ASimpleQuery node)
    {
        defaultIn(node);
    }

    public void outASimpleQuery(ASimpleQuery node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleQuery(ASimpleQuery node)
    {
        inASimpleQuery(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getDefinedby() != null)
        {
            node.getDefinedby().apply(this);
        }
        if(node.getHead() != null)
        {
            node.getHead().apply(this);
        }
        outASimpleQuery(node);
    }

    public void inAComplexQuery(AComplexQuery node)
    {
        defaultIn(node);
    }

    public void outAComplexQuery(AComplexQuery node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComplexQuery(AComplexQuery node)
    {
        inAComplexQuery(node);
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getDefinedby() != null)
        {
            node.getDefinedby().apply(this);
        }
        if(node.getHead() != null)
        {
            node.getHead().apply(this);
        }
        outAComplexQuery(node);
    }

    public void inAHead(AHead node)
    {
        defaultIn(node);
    }

    public void outAHead(AHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHead(AHead node)
    {
        inAHead(node);
        if(node.getEntity() != null)
        {
            node.getEntity().apply(this);
        }
        outAHead(node);
    }

    public void inASingleBody(ASingleBody node)
    {
        defaultIn(node);
    }

    public void outASingleBody(ASingleBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleBody(ASingleBody node)
    {
        inASingleBody(node);
        if(node.getEntity() != null)
        {
            node.getEntity().apply(this);
        }
        outASingleBody(node);
    }

    public void inAListBody(AListBody node)
    {
        defaultIn(node);
    }

    public void outAListBody(AListBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListBody(AListBody node)
    {
        inAListBody(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getEntity() != null)
        {
            node.getEntity().apply(this);
        }
        outAListBody(node);
    }

    public void inASingleConditions(ASingleConditions node)
    {
        defaultIn(node);
    }

    public void outASingleConditions(ASingleConditions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleConditions(ASingleConditions node)
    {
        inASingleConditions(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outASingleConditions(node);
    }

    public void inAListConditions(AListConditions node)
    {
        defaultIn(node);
    }

    public void outAListConditions(AListConditions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListConditions(AListConditions node)
    {
        inAListConditions(node);
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outAListConditions(node);
    }

    public void inAEqualCondition(AEqualCondition node)
    {
        defaultIn(node);
    }

    public void outAEqualCondition(AEqualCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualCondition(AEqualCondition node)
    {
        inAEqualCondition(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqualCondition(node);
    }

    public void inADifferentCondition(ADifferentCondition node)
    {
        defaultIn(node);
    }

    public void outADifferentCondition(ADifferentCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifferentCondition(ADifferentCondition node)
    {
        inADifferentCondition(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDifferent() != null)
        {
            node.getDifferent().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADifferentCondition(node);
    }

    public void inAGraterCondition(AGraterCondition node)
    {
        defaultIn(node);
    }

    public void outAGraterCondition(AGraterCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGraterCondition(AGraterCondition node)
    {
        inAGraterCondition(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGraterCondition(node);
    }

    public void inALessCondition(ALessCondition node)
    {
        defaultIn(node);
    }

    public void outALessCondition(ALessCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessCondition(ALessCondition node)
    {
        inALessCondition(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALessCondition(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValue(node);
    }

    public void inAVarValue(AVarValue node)
    {
        defaultIn(node);
    }

    public void outAVarValue(AVarValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarValue(AVarValue node)
    {
        inAVarValue(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVarValue(node);
    }

    public void inAEntityValue(AEntityValue node)
    {
        defaultIn(node);
    }

    public void outAEntityValue(AEntityValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntityValue(AEntityValue node)
    {
        inAEntityValue(node);
        if(node.getEntity() != null)
        {
            node.getEntity().apply(this);
        }
        outAEntityValue(node);
    }

    public void inAIdEntity(AIdEntity node)
    {
        defaultIn(node);
    }

    public void outAIdEntity(AIdEntity node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdEntity(AIdEntity node)
    {
        inAIdEntity(node);
        if(node.getVartype() != null)
        {
            node.getVartype().apply(this);
        }
        outAIdEntity(node);
    }

    public void inADefEntity(ADefEntity node)
    {
        defaultIn(node);
    }

    public void outADefEntity(ADefEntity node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefEntity(ADefEntity node)
    {
        inADefEntity(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getAttributes() != null)
        {
            node.getAttributes().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getVartype() != null)
        {
            node.getVartype().apply(this);
        }
        outADefEntity(node);
    }

    public void inAIdeVartype(AIdeVartype node)
    {
        defaultIn(node);
    }

    public void outAIdeVartype(AIdeVartype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdeVartype(AIdeVartype node)
    {
        inAIdeVartype(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdeVartype(node);
    }

    public void inAVariableVartype(AVariableVartype node)
    {
        defaultIn(node);
    }

    public void outAVariableVartype(AVariableVartype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableVartype(AVariableVartype node)
    {
        inAVariableVartype(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVariableVartype(node);
    }

    public void inASingleAttributes(ASingleAttributes node)
    {
        defaultIn(node);
    }

    public void outASingleAttributes(ASingleAttributes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleAttributes(ASingleAttributes node)
    {
        inASingleAttributes(node);
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        outASingleAttributes(node);
    }

    public void inAListAttributes(AListAttributes node)
    {
        defaultIn(node);
    }

    public void outAListAttributes(AListAttributes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListAttributes(AListAttributes node)
    {
        inAListAttributes(node);
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        outAListAttributes(node);
    }

    public void inAElementAttribute(AElementAttribute node)
    {
        defaultIn(node);
    }

    public void outAElementAttribute(AElementAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementAttribute(AElementAttribute node)
    {
        inAElementAttribute(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getVartype() != null)
        {
            node.getVartype().apply(this);
        }
        outAElementAttribute(node);
    }

    public void inASimpleInsert(ASimpleInsert node)
    {
        defaultIn(node);
    }

    public void outASimpleInsert(ASimpleInsert node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleInsert(ASimpleInsert node)
    {
        inASimpleInsert(node);
        if(node.getInsertbody() != null)
        {
            node.getInsertbody().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleInsert(node);
    }

    public void inAAttributeInsertbody(AAttributeInsertbody node)
    {
        defaultIn(node);
    }

    public void outAAttributeInsertbody(AAttributeInsertbody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributeInsertbody(AAttributeInsertbody node)
    {
        inAAttributeInsertbody(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getAttributes() != null)
        {
            node.getAttributes().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        outAAttributeInsertbody(node);
    }

    public void inAEmptyInsertbody(AEmptyInsertbody node)
    {
        defaultIn(node);
    }

    public void outAEmptyInsertbody(AEmptyInsertbody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyInsertbody(AEmptyInsertbody node)
    {
        inAEmptyInsertbody(node);
        outAEmptyInsertbody(node);
    }
}
