/* This file was generated by SableCC (http://www.sablecc.org/). */

package entitiesdb.language.analysis;

import java.util.*;
import entitiesdb.language.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPQuery().apply(this);
        outStart(node);
    }

    public void inADefinitionQuery(ADefinitionQuery node)
    {
        defaultIn(node);
    }

    public void outADefinitionQuery(ADefinitionQuery node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinitionQuery(ADefinitionQuery node)
    {
        inADefinitionQuery(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getDefinedby() != null)
        {
            node.getDefinedby().apply(this);
        }
        if(node.getEntity() != null)
        {
            node.getEntity().apply(this);
        }
        outADefinitionQuery(node);
    }

    public void inAEntity(AEntity node)
    {
        defaultIn(node);
    }

    public void outAEntity(AEntity node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntity(AEntity node)
    {
        inAEntity(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getAttributes() != null)
        {
            node.getAttributes().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAEntity(node);
    }

    public void inASingleAttributes(ASingleAttributes node)
    {
        defaultIn(node);
    }

    public void outASingleAttributes(ASingleAttributes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleAttributes(ASingleAttributes node)
    {
        inASingleAttributes(node);
        if(node.getValuetype() != null)
        {
            node.getValuetype().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASingleAttributes(node);
    }

    public void inAListAttributes(AListAttributes node)
    {
        defaultIn(node);
    }

    public void outAListAttributes(AListAttributes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListAttributes(AListAttributes node)
    {
        inAListAttributes(node);
        if(node.getAttributes() != null)
        {
            node.getAttributes().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getValuetype() != null)
        {
            node.getValuetype().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAListAttributes(node);
    }

    public void inAAtomicValuetype(AAtomicValuetype node)
    {
        defaultIn(node);
    }

    public void outAAtomicValuetype(AAtomicValuetype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtomicValuetype(AAtomicValuetype node)
    {
        inAAtomicValuetype(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAAtomicValuetype(node);
    }

    public void inAEntityValuetype(AEntityValuetype node)
    {
        defaultIn(node);
    }

    public void outAEntityValuetype(AEntityValuetype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntityValuetype(AEntityValuetype node)
    {
        inAEntityValuetype(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAEntityValuetype(node);
    }

    public void inAVarValuetype(AVarValuetype node)
    {
        defaultIn(node);
    }

    public void outAVarValuetype(AVarValuetype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarValuetype(AVarValuetype node)
    {
        inAVarValuetype(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVarValuetype(node);
    }

    public void inAEntitydefValuetype(AEntitydefValuetype node)
    {
        defaultIn(node);
    }

    public void outAEntitydefValuetype(AEntitydefValuetype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntitydefValuetype(AEntitydefValuetype node)
    {
        inAEntitydefValuetype(node);
        if(node.getEntity() != null)
        {
            node.getEntity().apply(this);
        }
        outAEntitydefValuetype(node);
    }

    public void inAPatternBody(APatternBody node)
    {
        defaultIn(node);
    }

    public void outAPatternBody(APatternBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatternBody(APatternBody node)
    {
        inAPatternBody(node);
        if(node.getWithblock() != null)
        {
            node.getWithblock().apply(this);
        }
        if(node.getPattern() != null)
        {
            node.getPattern().apply(this);
        }
        outAPatternBody(node);
    }

    public void inASinglePattern(ASinglePattern node)
    {
        defaultIn(node);
    }

    public void outASinglePattern(ASinglePattern node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinglePattern(ASinglePattern node)
    {
        inASinglePattern(node);
        if(node.getEntity() != null)
        {
            node.getEntity().apply(this);
        }
        outASinglePattern(node);
    }

    public void inAListPattern(AListPattern node)
    {
        defaultIn(node);
    }

    public void outAListPattern(AListPattern node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListPattern(AListPattern node)
    {
        inAListPattern(node);
        if(node.getPattern() != null)
        {
            node.getPattern().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getEntity() != null)
        {
            node.getEntity().apply(this);
        }
        outAListPattern(node);
    }

    public void inAConditionsWithblock(AConditionsWithblock node)
    {
        defaultIn(node);
    }

    public void outAConditionsWithblock(AConditionsWithblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionsWithblock(AConditionsWithblock node)
    {
        inAConditionsWithblock(node);
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        outAConditionsWithblock(node);
    }

    public void inAEmptyWithblock(AEmptyWithblock node)
    {
        defaultIn(node);
    }

    public void outAEmptyWithblock(AEmptyWithblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyWithblock(AEmptyWithblock node)
    {
        inAEmptyWithblock(node);
        outAEmptyWithblock(node);
    }

    public void inASingleConditions(ASingleConditions node)
    {
        defaultIn(node);
    }

    public void outASingleConditions(ASingleConditions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleConditions(ASingleConditions node)
    {
        inASingleConditions(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASingleConditions(node);
    }

    public void inAListConditions(AListConditions node)
    {
        defaultIn(node);
    }

    public void outAListConditions(AListConditions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListConditions(AListConditions node)
    {
        inAListConditions(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getConditions() != null)
        {
            node.getConditions().apply(this);
        }
        outAListConditions(node);
    }
}
