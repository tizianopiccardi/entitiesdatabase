/* This file was generated by SableCC (http://www.sablecc.org/). */

package entitiesdb.language.node;

import entitiesdb.language.analysis.*;

@SuppressWarnings("nls")
public final class AListPattern extends PPattern
{
    private PRequest _request_;
    private TComa _coma_;
    private PPattern _pattern_;

    public AListPattern()
    {
        // Constructor
    }

    public AListPattern(
        @SuppressWarnings("hiding") PRequest _request_,
        @SuppressWarnings("hiding") TComa _coma_,
        @SuppressWarnings("hiding") PPattern _pattern_)
    {
        // Constructor
        setRequest(_request_);

        setComa(_coma_);

        setPattern(_pattern_);

    }

    @Override
    public Object clone()
    {
        return new AListPattern(
            cloneNode(this._request_),
            cloneNode(this._coma_),
            cloneNode(this._pattern_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListPattern(this);
    }

    public PRequest getRequest()
    {
        return this._request_;
    }

    public void setRequest(PRequest node)
    {
        if(this._request_ != null)
        {
            this._request_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._request_ = node;
    }

    public TComa getComa()
    {
        return this._coma_;
    }

    public void setComa(TComa node)
    {
        if(this._coma_ != null)
        {
            this._coma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._coma_ = node;
    }

    public PPattern getPattern()
    {
        return this._pattern_;
    }

    public void setPattern(PPattern node)
    {
        if(this._pattern_ != null)
        {
            this._pattern_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pattern_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._request_)
            + toString(this._coma_)
            + toString(this._pattern_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._request_ == child)
        {
            this._request_ = null;
            return;
        }

        if(this._coma_ == child)
        {
            this._coma_ = null;
            return;
        }

        if(this._pattern_ == child)
        {
            this._pattern_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._request_ == oldChild)
        {
            setRequest((PRequest) newChild);
            return;
        }

        if(this._coma_ == oldChild)
        {
            setComa((TComa) newChild);
            return;
        }

        if(this._pattern_ == oldChild)
        {
            setPattern((PPattern) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
