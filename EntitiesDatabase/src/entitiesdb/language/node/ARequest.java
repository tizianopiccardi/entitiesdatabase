/* This file was generated by SableCC (http://www.sablecc.org/). */

package entitiesdb.language.node;

import entitiesdb.language.analysis.*;

@SuppressWarnings("nls")
public final class ARequest extends PRequest
{
    private TIdentifier _identifier_;
    private TLbracket _lbracket_;
    private PAttriblist _attriblist_;
    private TRbracket _rbracket_;

    public ARequest()
    {
        // Constructor
    }

    public ARequest(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLbracket _lbracket_,
        @SuppressWarnings("hiding") PAttriblist _attriblist_,
        @SuppressWarnings("hiding") TRbracket _rbracket_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setLbracket(_lbracket_);

        setAttriblist(_attriblist_);

        setRbracket(_rbracket_);

    }

    @Override
    public Object clone()
    {
        return new ARequest(
            cloneNode(this._identifier_),
            cloneNode(this._lbracket_),
            cloneNode(this._attriblist_),
            cloneNode(this._rbracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARequest(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLbracket getLbracket()
    {
        return this._lbracket_;
    }

    public void setLbracket(TLbracket node)
    {
        if(this._lbracket_ != null)
        {
            this._lbracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lbracket_ = node;
    }

    public PAttriblist getAttriblist()
    {
        return this._attriblist_;
    }

    public void setAttriblist(PAttriblist node)
    {
        if(this._attriblist_ != null)
        {
            this._attriblist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._attriblist_ = node;
    }

    public TRbracket getRbracket()
    {
        return this._rbracket_;
    }

    public void setRbracket(TRbracket node)
    {
        if(this._rbracket_ != null)
        {
            this._rbracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rbracket_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._lbracket_)
            + toString(this._attriblist_)
            + toString(this._rbracket_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lbracket_ == child)
        {
            this._lbracket_ = null;
            return;
        }

        if(this._attriblist_ == child)
        {
            this._attriblist_ = null;
            return;
        }

        if(this._rbracket_ == child)
        {
            this._rbracket_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._lbracket_ == oldChild)
        {
            setLbracket((TLbracket) newChild);
            return;
        }

        if(this._attriblist_ == oldChild)
        {
            setAttriblist((PAttriblist) newChild);
            return;
        }

        if(this._rbracket_ == oldChild)
        {
            setRbracket((TRbracket) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
