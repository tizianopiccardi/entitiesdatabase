Package entitiesdb.language;
 
  
Helpers
  letter = [['a' .. 'z'] + ['A' .. 'Z']] ;
  digit = ['0'..'9'];
  cr = 13;
  lf = 10;
  all = [0 .. 127];
  any_charater = [0x0 .. 0xfffff];
  not_cr_lf = [any_charater - [cr + lf]]; 
  

  
  dollar = '$';

  
  //nl = [cr + lf];
  
  //escape_sequence = '\' ( ''' | '"'  | '\' | '0' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' );

  //s_char = [any_charater - '"'] | escape_sequence;
  //s_char_sequence = s_char+;
  
   s_char_sequence = [any_charater - ''']+;
    
    
Tokens

  new_line = cr | lf | cr lf;
  blank = ' '* | 9;
  coma = ',';
  
  colon = ':';
  definedby = ':-';
  
  lbracket = '(';
  rbracket = ')';
  
  identifier = letter (letter | digit | '_' )*;
  
  variable = dollar letter (letter | digit | '_' )*;
  
  string = ''' s_char_sequence? '''; 
  
  //number = digit+;
  
  qmark = '?';
  
  equal = '=';
  different = '!=';
  greater = '>';
  less = '<';
  
Ignored Tokens
  blank, 
  new_line;
  
Productions
	/*
	main 		=   {query}  query
				  |	{insert} greater insert
				 // | {delete} delete
				  ; 
	
	query		=   {simple} head definedby body
				  | {complex} head definedby body qmark conditions
				  ;
	
	head 		=	entity
				  ;
			
	body 		=	{single} entity
				  | {list}	 entity coma body
				  ;
				  
	conditions	=	{single} condition
				  | {list}	 condition coma conditions
				  ;
				  
	condition	=   {equal} 	[left]:value equal [right]:value
				  | {different} [left]:value different [right]:value
				  //| {grater} 	[left]:value greater [right]:value
				  //| {less} 		[left]:value less [right]:value
				  ;
				  
	value		=	{string} string
				  //| {number} number
				  | {var}	 variable //NON LO RAGGIUNGE
				  | {entity} entity
				  ;
				  
	entity		= //  {id}  vartype //FORSE LO RISOLVE
				   {def} vartype lbracket attributes rbracket
				  ;
	
	vartype		=	{ide}		 identifier
				  | {variable}	 variable
				  ;
	
	attributes  =	{single} attribute
				  | {list}	 [list]:attributes coma attribute
				  | {empty}
				  ;
				  
	attribute	= 	{string} 	vartype colon string
				  | {variable}	vartype colon variable
				  | {entity}	vartype colon entity
				  ;
				  
	/////////////////////////////////////////////////////////////////////////
	
	insert		=   {simple} identifier insertbody
				  ;
	
	insertbody  =   {attribute} lbracket attributes rbracket
				  | {empty}
				  ;
*/


	main 		=   {query}  query
				  //|	{insert} greater insert
				  ; 
	
	query		=   {simple} head definedby body
				  | {complex} head definedby body qmark conditions
				  ;
	
	head 		=	{empty}
				  ;
				  
	conditions	=	{empty}
				  ;
			
	body 		=	{single} entitypattern
				  | {list}	 entitypattern coma body
				  ;
				  
				  
	entitypattern =  entitytype entitybody
				  ;
					
	entitytype    =	{ide}		 identifier
				  | {variable}	 variable
				  ;
	

	entitybody		 =  lbracket attributes rbracket
					;	
					
					


	attributes  =	{single} attribute
				  | {list}	 [list]:attributes coma attribute
				  | {empty}//se succede (,a:d,b:c) casino
				  ;


	attribute	= 	attributetype colon value
				  ;
				  
	attributetype    =	{ide}		 identifier
				  | {variable}	 variable
				  ;	
	
	value		=   {string} 	string
				  | {entity}	identifier optdefinition
				  | {variable}	variable optdefinition
				  ;

	optdefinition = {empty} //is a simple var
				   | {body}   entitybody
				   ;
				   


					
	/*
	conditions	=	{single} condition
				  | {list}	 condition coma conditions
				  ;
				  
	condition	=   {equal} 	[left]:value equal [right]:value
				  | {different} [left]:value different [right]:value
				  //| {grater} 	[left]:value greater [right]:value
				  //| {less} 		[left]:value less [right]:value
				  ;
				  
	value		=	{string} string
				  | {var}	 variable optionalbody //NON LO RAGGIUNGE
				  | {entity} identifier entitybody
				  ;
				  
	optionalbody = 	 {empty}
				   | {entitydef} entitybody
				   ;
				
	/*entity		= //  {id}  vartype //FORSE LO RISOLVE
				   {def} vartype lbracket attributes rbracket
				  ;*/
	

/*
				  
	attribute	= 	{string} 	vartype colon string
				  | {variable}	vartype colon variable
				  | {entity}	vartype colon entity
				  ;
				  
	/////////////////////////////////////////////////////////////////////////
	
	insert		=   {simple} identifier insertbody
				  ;
	
	insertbody  =   {attribute} lbracket attributes rbracket
				  | {empty}
				  ;
	
	*/
	